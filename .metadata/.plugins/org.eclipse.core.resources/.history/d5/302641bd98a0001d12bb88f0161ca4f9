package com.shopme.admin.user;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;


import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

@Service
public class UserService {
@Autowired
	private UserRepository userRepo;
@Autowired
private RoleRepository roleRepository;
	@Autowired
	private PasswordEncoder passwordEncoder;

public List<User> listAll(){
		
		return (List<User>) userRepo.findAll();
		
	}
public List<Role> getAllRoles(){
	
	return (List<Role>) roleRepository.findAll();
	
	
	
}
public void save(User user) {
	
	boolean isUpdatingUser =(user.getId()!=null);
	if(isUpdatingUser) {
		User existingUser = userRepo.findById(user.getId()).get();
		if(existingUser.getPassword().isEmpty()) {
			existingUser.setPassword(user.getPassword());
			encodePassword(existingUser);
			
		}else {
			encodePassword(user);
		}
	}else {
		encodePassword(user);
		
	}
	userRepo.save(user);
	
}
private void encodePassword(User user) {
	
	user.setPassword(passwordEncoder.encode(user.getPassword()));
	
	
}
public boolean isEmailUnique(Integer id ,String email) {
	User userByEmail = userRepo.getUserByEmail(email);
	if(userByEmail == null) return true;
boolean isCreatingNew = (id==null);
if(isCreatingNew) {
	if(userByEmail != null) return false;
			
}else {
	if(userByEmail.getId() != id) {
		return false;
	}
	
}
return true;
}
public User getUserById(Integer id) throws UserNotFoundException {
	
	try {
		User user = userRepo.findById(id).get();
		return user;
	} catch (NoSuchElementException e) {
		throw  new UserNotFoundException("No User Exist with Given ID "+id);
	
	}
	
}




	
}
