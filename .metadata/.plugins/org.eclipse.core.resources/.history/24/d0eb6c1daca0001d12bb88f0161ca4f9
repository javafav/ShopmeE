package com.shopme.admin.user;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

@Controller
public class UserContoller {

	@Autowired
	private UserService service;

	@GetMapping("/users")
	public String listAll(Model model) {
		List<User> listUsers = service.listAll();
		model.addAttribute("listUsers", listUsers);
		return "users";
	}

	@GetMapping("/users/new")
	public String newUser(Model model) {
		List<Role> listRoles = service.getAllRoles();
		
		User user = new User();
		user.setEnabled(true);
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("pageTitle", "Create New User");
		return "user_form";
	}

	@PostMapping("/users/save")
	public String saveNewUser(User user , RedirectAttributes redirectAttributes) {
service.save(user);
		// User user = (User)model.getAttribute("user");
		System.out.println(user);
redirectAttributes.addFlashAttribute("message", "User has beeen saved successfully !");
		return "redirect:/users";

	}
	@GetMapping("/users/edit/{id}")
	public String updateUserDetail(@PathVariable Integer id, Model model , RedirectAttributes redirectAttributes) {
		
		User user;
		try {
			user = service.getUserById(id);
			model.addAttribute("user", user);
			List<Role> listRoles = service.getAllRoles();
			model.addAttribute("listRoles", listRoles);
			model.addAttribute("pageTitle", " Edit User (ID "+id+" )");
			return "user_form";
		} catch (UserNotFoundException ex) {
			// TODO Auto-generated catch block
			
			redirectAttributes.addFlashAttribute("message", ex.getMessage());
			return "redirect:/users";
		}
		
		
	}
	@GetMapping("/users/delete/{id}")
	public String deleteUser(@PathVariable Integer id, Model model , RedirectAttributes redirectAttributes) {
		
		User user;
		try {
			user = service.getUserById(id);
			service.deleteUser(user);
			redirectAttributes.addFlashAttribute("message", 
					"User:  "+user.getFirstName()+" ( with ID :"+user.getId()+ " ) has deleted successfully");
			return "redirect:/users";
			
		} catch (UserNotFoundException ex) {
			// TODO Auto-generated catch block
			
			redirectAttributes.addFlashAttribute("message", ex.getMessage());
			return "redirect:/users";
		}
		
		
	}
	
	@GetMapping("users/{id}/enabled/{status}")
	public String changeUserStatus(@PathVariable("id") Integer id ,
			@PathVariable("status") boolean status ,
			RedirectAttributes redirectAttributes) {
		redirectAttributes.addFlashAttribute("message", 
				"User:   ( with ID :"+id+"  ) has updated successfully");
		service.updateUserStatus(id, status);
		return "redirect:/users";
		
	}
	
	
}
