package com.shopme.admin.user;

import java.io.IOException;
import java.util.List;
import org.springframework.util.StringUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.shopme.admin.FIleUploadUtil;
import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;



@Controller
public class UserContoller {

	@Autowired
	private UserService service;

	@GetMapping("/users")
	public String listAll(Model model) {
		List<User> listUsers = service.listAll();
		model.addAttribute("listUsers", listUsers);
		return "users";
	}

	@GetMapping("/users/new")
	public String newUser(Model model) {
		List<Role> listRoles = service.getAllRoles();
		
		User user = new User();
		user.setEnabled(true);
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("pageTitle", "Create New User");
		return "user_form";
	}

	@PostMapping("/users/save")
	public String saveNewUser(User user ,
			RedirectAttributes redirectAttributes,
			@RequestParam("image")MultipartFile multipartFile) throws IOException {
		if(!multipartFile.isEmpty()){
		
			System.out.println(user);
			System.out.println(multipartFile.getOriginalFilename());
			String fileName =StringUtils.cleanPath(multipartFile.getOriginalFilename());
			
			user.setPhotos(fileName);
			User savedUser =service.save(user);
			String uploadDir ="user-photos/"+savedUser.getId();
			
			FIleUploadUtil.saveFile(uploadDir, fileName, multipartFile);
			
		}
		
		
	
		// User user = (User)model.getAttribute("user");
		
redirectAttributes.addFlashAttribute("message", "User has beeen saved successfully !");
		return "redirect:/users";

	}
	@GetMapping("/users/edit/{id}")
	public String updateUserDetail(@PathVariable Integer id, Model model , RedirectAttributes redirectAttributes,
			@RequestParam("image")MultipartFile multipartFile) {
		
		User user;
		try {
			
			user = service.getUserById(id);
			if(!multipartFile.isEmpty()){
				
				System.out.println(user);
				System.out.println(multipartFile.getOriginalFilename());
			model.addAttribute("user", user);	
			List<Role> listRoles = service.getAllRoles();
			model.addAttribute("listRoles", listRoles);
			model.addAttribute("pageTitle", " Edit User (ID "+id+" )");
			return "user_form";
		} catch (UserNotFoundException ex) {
			// TODO Auto-generated catch block
			
			redirectAttributes.addFlashAttribute("message", ex.getMessage());
			return "redirect:/users";
		}
		
		
	}
	@GetMapping("/users/delete/{id}")
	public String deleteUser(@PathVariable Integer id, Model model , RedirectAttributes redirectAttributes) {
		
		User user;
		try {
			user = service.getUserById(id);
			service.deleteUser(user);
			redirectAttributes.addFlashAttribute("message", 
					"User:  "+user.getFirstName()+" ( with ID :"+user.getId()+ " ) has deleted successfully");
			return "redirect:/users";
			
		} catch (UserNotFoundException ex) {
			// TODO Auto-generated catch block
			
			redirectAttributes.addFlashAttribute("message", ex.getMessage());
			return "redirect:/users";
		}
		
		
	}
	
	@GetMapping("users/{id}/enabled/{status}")
	public String changeUserStatus(@PathVariable("id") Integer id ,
			@PathVariable("status") boolean status ,
			RedirectAttributes redirectAttributes) {
		
	String messageStatus = 	status ? "Enabled" :"Disabled";
	String message ="User   (ID : "+id+ " ) has been  "+messageStatus+" successfuly !";
	redirectAttributes.addFlashAttribute("message",message);
	service.updateUserStatus(id, status);
		return "redirect:/users";
		
	}
	
	
}
